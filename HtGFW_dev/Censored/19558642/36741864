19558642
article
36741864
https://zhuanlan.zhihu.com/p/36741864
小安
针对使用Doppelgänging技术的SynAck勒索软件变种的分析

前言2017年12月，在BlackHat会议上，新型代码注入技术Process Doppelgänging被首次发布（ https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf ）。在会议的相关资料发布后，一些恶意软件的开发者已经开始借助这种复杂的技术来绕过当今流行的安全解决方案。在2018年4月，我们首次发现了使用该绕过技术的勒索软件——SynAck。在这里需要指出的是，SynAck并不是一种新的勒索软件，它早在2017年9月就被发现，然而如今发现其变种中使用了Doppelgänging技术，这也引起了我们的关注。本文主要针对使用了Doppelgänging技术的新SynAck变种进行分析。反分析与反检测技术新型代码注入技术Process DoppelgängingSynAck勒索软件借助该技术试图绕过当今流行的安全解决方案。该技术的主要目的是，使用NTFS文件系统事物（NTFS Transactions），从事务处理文件（Transacted File）中启动恶意进程，从而使该恶意进程看起来像是合法的进程。使用Process Doppelgänging技术的部分代码如下：二进制混淆为了扰乱恶意软件分析者的分析工作，恶意软件开发人员通常会使用自定义的PE加壳器来保护木马可执行文件的原始代码。然而，大多数的加壳器都可以被安全人员轻松脱壳，还原出可供分析的原始的木马PE文件。然而，SynAck并不是这样做的，该木马的可执行文件没有经过加壳。相反，该可执行文件在编译前就已经被彻底混淆。因此，如果要对SynAck进行逆向，其工作量要远远超过其他勒索软件。特洛伊木马可执行文件的控制流非常复杂，大部分的调用都是间接进行，其目标地址是通过两个DWORD常量的算术运算计算而成。所有WinAPI函数地址都是动态导入的，需要先对导出的系统DLL进行解析，然后再对函数名称进行CRC32哈希值计算。这一点并不是新的方法，分析过程也不复杂。但在SynAck中，开发者隐藏了检索API函数地址的过程和目标哈希值，从而加大分析的工作量。接下来，我们来详细说明SynAck是如何调用WinAPI函数的。我们首先来看下面的反汇编代码：该代码将位于403b13的DWORD与常数78f5ec4d相减，得到结果403ad0，即为调用过程的地址。该过程将两个常量（N1 = ffffffff877bbca1和N2 = 2f399204）压入栈，并将执行传递给403680处的过程，该过程将计算N1 xor N2 = a8422ea5的结果。计算出的该值，即是SynAck希望调用的API函数名称的散列值。过程403680接下来会通过解析系统DLL的导出表，计算每个函数名称的哈希值，并将其与值a8422ea5进行比较，从而找到该函数的地址。在找到这个API函数地址之后，SynAck会将执行传递给这个地址。请注意，实际上进行的并不是上图中的简单调用（CALL），而是使用了PUSH + RET指令，这也可以从另一个方面让分析工作变得更复杂。在调用WinAPI函数时，SynAck的开发者使用了不同的指令组合，而没有使用CALL：push reg